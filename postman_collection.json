{
	"info": {
		"_postman_id": "aac7e0a3-6532-4da6-812b-751abdc13e17",
		"name": "Upskilling_API_Project",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25619335"
	},
	"item": [
		{
			"name": "Conditional Workflow",
			"item": [
				{
					"name": "Get User By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is not empty\", function () {\r",
									"    pm.expect(pm.response.json().data).to.not.be.empty;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate the job title of the user is 'Engineer'\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.data).to.be.an('object');\r",
									"    pm.expect(responseData.data.job).to.exist.and.be.a(\"string\");\r",
									"    \r",
									"    pm.collectionVariables.set(\"newUserId\", responseData.data.id);\r",
									"\r",
									"    let newJobTitle = '';\r",
									"    if (responseData.data.job.toLowerCase() === \"engineer\") {\r",
									"        newJobTitle = \"Senior Engineer\";\r",
									"    } else {\r",
									"        newJobTitle += \"Manager\";\r",
									"    }\r",
									"\r",
									"    pm.collectionVariables.set(\"newJob\", newJobTitle);\r",
									"    pm.execution.setNextRequest(\"Update User Job\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Update job title to 'Senior Engineer' if current title is 'Engineer'\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    if (responseData.data.job_title === \"Engineer\") {\r",
									"        pm.sendRequest({\r",
									"            url: \"{{baseUrl}}/users/:id\",\r",
									"            method: 'PUT',\r",
									"            header: {\r",
									"                'Content-Type': 'application/json'\r",
									"            },\r",
									"            body: {\r",
									"                job_title: \"Senior Engineer\"\r",
									"            }\r",
									"        }, function (err, res) {\r",
									"            pm.expect(res).to.have.status(200);\r",
									"        });\r",
									"    } else {\r",
									"        pm.expect(responseData.data.job_title).to.not.equal(\"Engineer\"); // If current title is not 'Engineer'\r",
									"    }\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User Job",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const newJob = pm.collectionVariables.get(\"newJob\");\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that the job is \" + newJob, function() {\r",
									"    pm.expect(responseData.data).to.be.an('object');\r",
									"    pm.expect(responseData.data.job).to.exist.and.be.a(\"string\");\r",
									"\r",
									"    pm.expect(responseData.data.job.toLocaleLowerCase()).to.equal(newJob.toLocaleLowerCase());\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"job\": \"{{newJob}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{newUserId}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Login Tests",
			"item": [
				{
					"name": "Successful Login - Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify status code\", () => {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate token is present\", () => {\r",
									"    const responseBody = pm.response.json();\r",
									"    // pm.expect(responseBody).to.have.property(\"token\");\r",
									"    // pm.expect(responseBody.token).to.be.a('string').and.to.have.length.greaterThan(0);\r",
									"    pm.expect(pm.response.json()).to.have.property(\"token\").that.is.a('string').and.to.have.length.greaterThan(0);\r",
									"    pm.environment.set(\"token\", responseBody.token);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify status code\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate token is present\", () => {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"token\").that.is.a('string').and.to.have.length.greaterThan(0);\r",
									"    pm.environment.set(\"token\", pm.response.json().token);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Send a request in the post response scripts\", function () {\r",
									"    pm.sendRequest({\r",
									"        url: 'https://{{baseUrl}}/login',\r",
									"        method: 'POST',\r",
									"        header: {\r",
									"            'Authorization': 'Bearer ' + pm.environment.get(\"token\")\r",
									"        },\r",
									"    body: {\r",
									"        \"username\": pm.variables.replaceIn(\"{{username}}\"),\r",
									"        \"password\": pm.variables.replaceIn(\"{{password}}\")\r",
									"    }\r",
									"    }, function (err, res) {\r",
									"        pm.test(\"Verify status code of the user request\", function () {\r",
									"            pm.expect(res).to.have.status(200);\r",
									"        });\r",
									"\r",
									"        pm.test(\"Validate token is present\", () => {\r",
									"            const responseBody = pm.response.json();\r",
									"            pm.expect(pm.response.json()).to.have.property(\"token\").that.is.a('string').and.to.have.length.greaterThan(0);\r",
									"            pm.environment.set(\"token\", responseBody.token);\r",
									"        });\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"{{email}}\",\r\n  \"password\": \"{{password}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Successful Login - Username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify successful login\", () => {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate token is present\", () => {\r",
									"    const responseBody = pm.response.json();\r",
									"    pm.expect(responseBody).to.have.property(\"token\");\r",
									"    pm.expect(responseBody.token).to.be.a('string').and.to.have.length.greaterThan(0);\r",
									"    pm.environment.set(\"token\", responseBody.token);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"{{email}}\",\r\n  \"password\": \"{{password}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unsuccessful Login - Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify status code\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate error message\", () => {\r",
									"    var errorMessage = pm.variables.replaceIn(\"{{error_nessage}}\");\r",
									"\r",
									"    const responseBody = pm.response.json();\r",
									"    pm.expect(responseBody).to.have.property(\"error\");\r",
									"    pm.expect(responseBody.error).to.be.a('string').and.to.eq(errorMessage);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"{{email}}\",\r\n  \"password\": \"{{password}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unsuccessful Login - Username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify status code\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate error message\", () => {\r",
									"    var errorMessage = pm.variables.replaceIn(\"{{error_nessage}}\");\r",
									"\r",
									"    const responseBody = pm.response.json();\r",
									"    pm.expect(responseBody).to.have.property(\"error\");\r",
									"    pm.expect(responseBody.error).to.be.a('string').and.to.eq(errorMessage);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"{{email}}\",\r\n  \"password\": \"{{password}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Verify successful login\", () => {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Validate token is present\", () => {\r",
							"    const responseBody = pm.response.json();\r",
							"    pm.expect(responseBody).to.have.property(\"token\");\r",
							"    pm.expect(responseBody.token).to.be.a('string').and.to.have.length.greaterThan(0);\r",
							"    pm.environment.set(\"token\", responseBody.token);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const token = pm.environment.get(\"token\");\r",
							"\r",
							"if(token !== undefined) {\r",
							"    pm.execution.setNextRequest(null);\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"email\": \"\",\r\n  \"password\": \"cityslicka\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/login",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Logout",
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/login",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "List Users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const responseData = pm.response.json();\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"// Validate pagination parameters\r",
							"pm.test(\"Response contains pagination parameters\", function () {\r",
							"    pm.expect(responseData).to.have.property('page');\r",
							"    pm.expect(responseData).to.have.property('per_page');\r",
							"    pm.expect(responseData).to.have.property('total_pages');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Each user has a valid ID\", function () {\r",
							"  \r",
							"    pm.expect(responseData.data).to.be.an('array');\r",
							"    responseData.data.forEach(function(user) {\r",
							"        pm.expect(user.id).to.be.a('number').and.to.be.greaterThan(0);\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Each user has a valid email format\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.data).to.be.an('array').that.is.not.empty;\r",
							"    \r",
							"    responseData.data.forEach(function(user) {\r",
							"        pm.expect(user.email).to.be.a('string').and.to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);\r",
							"    });\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users?page=2",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users"
					],
					"query": [
						{
							"key": "page",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Rate Limiting",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const responseData = pm.response.json();\r",
							"\r",
							"pm.test(\"Verify rate limiting headers\", function () {\r",
							"     pm.expect(pm.response.headers).to.include.all.keys(\r",
							"        'X-RateLimit-Limit', \r",
							"        'X-RateLimit-Remaining', \r",
							"        'X-RateLimit-Reset',\r",
							"        'X-RateLimit-Used',\r",
							"        'X-RateLimit-Resource');    \r",
							"});\r",
							"\r",
							"pm.test(\"Retry headers are valid if available\", function () {\r",
							"    pm.expect(pm.response.headers).to.include.any.keys('Retry-After', 'X-RateLimit-Used');\r",
							"    if (pm.response.headers.has('Retry-After')) {\r",
							"        pm.expect(pm.response.headers.get('Retry-After')).to.be.a('string').and.to.match(/^\\d+$/, \"Retry-After header should be a valid number\");\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"Verify 429 status code when rate limit is exceeded\", function() {\r",
							"    pm.expect(pm.response.headers).to.include.all.keys(\r",
							"        'X-RateLimit-Limit', \r",
							"        'X-RateLimit-Remaining', \r",
							"        'X-RateLimit-Reset',\r",
							"        'X-RateLimit-Used',\r",
							"        'X-RateLimit-Resource');\r",
							"\r",
							"    var rateLimitUsed = parseInt(pm.response.headers.get('X-RateLimit-Used'));\r",
							"    var rateLimitLimit = parseInt(pm.response.headers.get('X-RateLimit-Limit'));\r",
							"\r",
							"    if(rateLimitUsed > rateLimitLimit) {\r",
							"        pm.response.to.have.status(429);\r",
							"        pm.expect(pm.response.to.have.status(429, \"Status code should be 429\"));\r",
							"    }\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User By Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test to verify the format and constraints of the fields\r",
							"pm.test(\"Fields match the expected format and constraints\", function () {\r",
							"    var response = pm.response.json();\r",
							"    \r",
							"    pm.expect(response.data.id).to.be.a('number');\r",
							"    pm.expect(response.data.email).to.be.a('string').and.to.match(/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/);\r",
							"    pm.expect(response.data.first_name).to.be.a('string');\r",
							"    pm.expect(response.data.last_name).to.be.a('string');\r",
							"    pm.expect(response.data.avatar).to.be.a('string');\r",
							"});\r",
							"// Test to verify the format and constraints of the fields\r",
							"pm.test(\"Fields match the expected format and constraints\", function () {\r",
							"    var response = pm.response.json();\r",
							"    \r",
							"    pm.expect(response.data.id).to.be.a('number');\r",
							"    pm.expect(response.data.email).to.be.a('string').and.to.match(/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/);\r",
							"    pm.expect(response.data.first_name).to.be.a('string');\r",
							"    pm.expect(response.data.last_name).to.be.a('string');\r",
							"    pm.expect(response.data.avatar).to.be.a('string');\r",
							"});\r",
							"\r",
							"// Retry mechanism to handle failures\r",
							"pm.test(\"Retry mechanism to handle failures\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:id",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 201\", function () {\r",
							"  pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"\r",
							"const responseBody = pm.response.json();\r",
							"\r",
							"pm.test(\"Validate user is created\", () => {\r",
							"    pm.expect(responseBody).to.have.property(\"name\");\r",
							"    pm.expect(responseBody).to.have.property(\"job\");\r",
							"    // pm.expect(responseBody.token).to.be.a('string').and.to.have.length.greaterThan(0);\r",
							"\r",
							"    // pm.environment.set(\"token\", responseBody.token);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify id is unique\", () => {\r",
							"    \r",
							"    pm.expect(responseBody).to.have.property(\"name\");\r",
							"    pm.expect(responseBody).to.have.property(\"job\");\r",
							"    // pm.expect(responseBody.token).to.be.a('string').and.to.have.length.greaterThan(0);\r",
							"\r",
							"    // pm.environment.set(\"token\", responseBody.token);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify createdAt is within the last minute\", function () {\r",
							"    var createdAtTime = new Date(responseBody.createdAt).getTime();\r",
							"    var currentTime = new Date().getTime();\r",
							"    var timeDifference = (currentTime - createdAtTime) / 1000; // difference in seconds\r",
							"    pm.expect(timeDifference).to.be.lessThan(60, \"createdAt should be within the last minute\");\r",
							"});\r",
							"\r",
							"pm.test(\"Verify id is unique\", () => {\r",
							"\r",
							"    const allIds = pm.iterationData.get(\"allIds\") || [];\r",
							"    pm.expect(allIds).to.not.include(responseBody.id, \"Newly created id should be unique\");\r",
							"    allIds.push(responseBody.id);\r",
							"    pm.iterationData.set(\"allIds\", allIds);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"hamson\",\r\n  \"job\": \"racer\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update User",
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"username\": \"alanpam\",\r\n  \"email\": \"alanpam@mail.com\",\r\n  \"password\": \"Alanpam@123\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:id",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "7"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete User",
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"username\": \"alanpam\",\r\n  \"email\": \"alanpam@mail.com\",\r\n  \"password\": \"Alanpam@123\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:id",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":id"
					],
					"query": [
						{
							"key": "",
							"value": "",
							"disabled": true
						}
					],
					"variable": [
						{
							"key": "id",
							"value": "7"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://reqres.in/api",
			"type": "string"
		}
	]
}